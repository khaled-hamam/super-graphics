#version 330 core

uniform samplerCube textureSampler;

in vec3 vertexPosition;
in vec3 fragmentColor;
in vec3 fragmentTextCoord;
in vec3 fragmentNormal;

out vec4 color;

uniform vec3 lightPos;
uniform vec3 ambientLight = vec3(.5f);
uniform vec3 cameraPos;

vec3 calculateLight(vec3 colorValue) {
	// Ambient Light
	vec3 ambient = ambientLight * colorValue;

	// Diffuse Light
	vec3 posToLightDirVec = normalize(lightPos - vertexPosition);
	vec3 diffuseColor = vec3(1.f);
	float diffuse = clamp(dot(normalize(fragmentNormal), posToLightDirVec), 0, 1);
	vec3 diffuseFinal = diffuseColor * diffuse * colorValue;

	// Specular
	vec3 lightToPosDirVec = normalize(vertexPosition - lightPos);
	vec3 reflectDirVec = normalize(reflect(lightToPosDirVec, normalize(fragmentNormal)));
	vec3 posToViewDirVec = normalize(cameraPos - vertexPosition);
	float specularConstant = pow(max(dot(posToViewDirVec, reflectDirVec), 0), 30);
	vec3 specular = vec3(1.f) * specularConstant * colorValue;

	// Final Light
	return ambient + diffuseFinal + specular;
}

void main() {
	vec4 textureColor = texture(textureSampler, fragmentTextCoord);
	vec4 colorValue;
	
	if (textureColor != vec4(0.0f, 0.0f, 0.0f, 1.0f)) {
		if(textureColor.a < 0.1)
			discard;
		colorValue = textureColor;
	} else {
		colorValue = vec4(fragmentColor, 1.0);
	}

	vec3 light = calculateLight(colorValue.xyz);
	color = colorValue * vec4(light, 1.f);
}
